var Chat;

Chat = (function() {
  Chat.templates = {};

  Chat.templates.greetings = Handlebars.compile("Hello {{username}}");

  Chat.templates.users = Handlebars.compile('<li id="{{id}}" class="user-item"> <a href="#" class="sender" data-id="{{id}}" data-user="{{username}}"> <img class="thumbnail" width="45px" src="{{avatar}}" alt="{{username}}" /> <span class="user-body">{{username}}</span> </a> </li>');

  Chat.templates.mes = Handlebars.compile('<li class="chat-message"> <span class="message-date">{{hours h m}}</span> <span class="sender btn-link" data-id="{{user.id}}" data-user="{{user.username}}"> {{user.username}} </span> <p>{{message}}</p> </li>');

  function Chat(username, socket, containerId) {
    this.socket = socket;
    this.user = {
      name: username
    };
    this.createChatWindow(containerId);
    this.socket.emit('login', {
      username: $('#name').val(),
      mail: $('#email').val()
    });
    this.socket.on('logged', this.logged);
    this.socket.on('newUser', this.newUser);
    this.socket.on('recevMessage', this.recevMessage);
    this.socket.on('logout', this.logout);
  }

  Chat.prototype.createChatWindow = function(containerId) {
    $('textarea').attr("placeholder", "Message...");
    return $('button').on('click', this.sendMessage);
  };

  Chat.prototype.sendMessage = function(event) {
    var message;
    event.preventDefault();
    message = $('#message');
    if (message.val() === '') {
      return false;
    }
    socket.emit('sendMessage', {
      message: message.val()
    });
    return $('#message').val('');
  };

  Chat.prototype.recevMessage = function(msg) {
    $('.chat-messages-list').append(Chat.templates.mes(msg));
    $('.chat-message').last().addClass('animated bounceInLeft');
    msg = $('#message-container');
    return msg.animate({
      scrollTop: msg.prop("scrollHeight")
    }, 50);
  };

  Chat.prototype.logged = function(user) {
    $(".login").addClass('animated fadeOutRightBig');
    $('.login').one('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', function() {
      $(".logged").show().addClass('animated fadeInLeftBig');
      $("#users").removeClass('hidden').addClass('animated fadeInDown');
    });
    $('#message').val('');
    return $("#userGreeting").addClass('animated fadeInDown').text(Chat.templates.greetings(user));
  };

  Chat.prototype.newUser = function(user) {
    $("#users-item").append(Chat.templates.users(user));
    $('#count').addClass('animated flash').text($("#users-item").children().length);
    return $('#count').one('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', function() {
      return $(this).removeClass('animated flash');
    });
  };

  Chat.prototype.logout = function(user) {
    $('#' + user.id).remove();
    $('#count').addClass('animated flash').text($("#users-item").children().length);
    return $('#count').one('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', function() {
      return $(this).removeClass('animated flash');
    });
  };

  return Chat;

})();

//# sourceMappingURL=data:application/json;base64,