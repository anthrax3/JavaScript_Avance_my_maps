var Localisation;

Localisation = (function() {
  var getMarker, loadMarkers, removeMarker, showUserLocation, updateMarker;

  Localisation.map = '';

  Localisation.markers = {};

  Localisation.myMarker = {};

  Localisation.chat = {};

  function Localisation(socket, chat, mapId) {
    var defaultPosition, mapOptions;
    this.socket = socket;
    defaultPosition = new google.maps.LatLng(-34.397, 150.644);
    mapOptions = {
      zoom: 8,
      panControl: false,
      zoomControlOptions: {
        style: google.maps.ZoomControlStyle.LARGE,
        position: google.maps.ControlPosition.LEFT_CENTER
      },
      center: defaultPosition,
      mapTypeId: google.maps.MapTypeId.ROADMAP
    };
    Localisation.map = new google.maps.Map(document.getElementById(mapId), mapOptions);
    Localisation.markers = {
      1: 1
    };
    Localisation.chat = chat;
    this.geolocation(this.showPosition);
    socket.on('updateLocation', updateMarker);
    socket.on('logout', removeMarker);
    socket.emit('requestLocations', loadMarkers);
  }

  Localisation.prototype.geolocation = function(successHandler, errorHandler) {
    errorHandler = errorHandler || this.geolocationErrorHandler;
    if (navigator.geolocation) {
      return navigator.geolocation.getCurrentPosition(successHandler, errorHandler);
    } else {
      return alert("La géolocalisation n'est pas supporté par ce navigateur.");
    }
  };

  Localisation.prototype.showPosition = function(position) {
    var data;
    data = {
      lat: position.coords.latitude,
      lng: position.coords.longitude
    };
    Localisation.myMarker = getMarker(data.lat, data.lng, 'Me');
    Localisation.map.setCenter(Localisation.myMarker.getPosition());
    return socket.emit("sendLocation", data);
  };

  Localisation.prototype.geolocationErrorHandler = function(error) {
    switch (error.code) {
      case error.PERMISSION_DENIED:
        return alert("Votre position ne sera pas partagée avec d'autres utilisateurs.");
      case error.POSITION_UNAVAILABLE:
        return alert("Les informations de geolocalisation sont indisponible.");
      case error.TIMEOUT:
        return alert("La demande pour obtenir votre position à expiré.");
      case error.UNKNOWN_ERROR:
        return alert("Une erreur inconnue est survenue.");
    }
  };

  getMarker = function(lat, lng, title) {
    return new google.maps.Marker({
      title: title,
      map: Localisation.map,
      position: new google.maps.LatLng(lat, lng)
    });
  };

  updateMarker = function(data) {
    var marker;
    marker = Localisation.markers[data.id];
    if (marker) {
      marker.setPosition(new google.maps.LatLng(data.lat, data.lng));
    } else {
      Localisation.markers[data.id] = getMarker(data.lat, data.lng, data.username);
    }
    console.log(Localisation.markers, "updateMarker");
    $('.sender').click(showUserLocation);
  };

  loadMarkers = function(data) {
    var key, user;
    for (key in data) {
      user = data[key];
      Localisation.markers[key] = getMarker(user.lat, user.lng, user.username);
    }
    console.log(Localisation.markers, "loadMarkers");
    $('.sender').click(showUserLocation);
  };

  removeMarker = function(user) {
    var marker;
    marker = Localisation.markers[user.id];
    if (marker) {
      marker.setMap(null);
      delete Localisation.markers[user.id];
    }
    console.log(user, Localisation.markers, "removeMarker");
  };

  showUserLocation = function(event) {
    var key, userMarker, username;
    event.preventDefault();
    console.log('showUserLocation');
    key = $(this).data("id");
    username = $(this).data("user");
    console.log(key, username, Localisation.chat.user.name);
    if (username === Localisation.chat.user.name) {
      Localisation.map.setCenter(Localisation.myMarker.getPosition());
    } else {
      userMarker = Localisation.markers[key];
      if (userMarker) {
        Localisation.map.setCenter(userMarker.getPosition());
      } else {
        alert("L'utilisateur n'est plus connecté.");
      }
    }
  };

  return Localisation;

})();

//# sourceMappingURL=data:application/json;base64,